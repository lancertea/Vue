【全局API】
#插件
插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：
1.添加全局方法或者 property。如：vue-custom-element
2.添加全局资源：指令/过滤器/过渡等。如 vue-touch
3.通过全局混入来添加一些组件选项。如 vue-router
4.添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。
5.一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 vue-router
通过全局方法 Vue.use() 使用插件，它需要在你调用 new Vue() 启动应用之前完成

【DOM】
#el
类型： string | Element
限制： 只在用 new 创建实例时生效
提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。
注：所有的挂载元素会被 Vue 生成的 DOM 替换。因此不推荐挂载 root 实例到 <html> 或者 <body> 上。

#template
类型：string
一个字符串模板作为 Vue 实例的标识使用。模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。
如果 Vue 选项中包含渲染函数，该模板将被忽略。

#render
类型：(createElement: () => VNode) => VNode
字符串模板的代替方案。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。
如果组件是一个函数组件，渲染函数还会接收一个额外的 context 参数，为没有实例的函数组件提供上下文信息。
vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。


优先级：在进行DOM树的渲染时，render渲染函数的优先级最高，template次之且需编译成渲染函数，而挂载点el属性对应的元素若存在，
则在前两者均不存在时，其outerHTML才会用于编译与渲染。
Vue实例后会先执行_init()进行初始化，快结束时会判断是否有el属性，如果存在则调用$mount进行挂载

【数据】
#data
类型：Object | Function
限制：组件的定义只接受 function
Vue 实例的数据对象。Vue 将会递归将 data 的 property 转换为 getter/setter，从而让 data 的 property 能够响应数据变化。
对象必须是纯粹的对象 (含有零个或多个的 key/value 对)。只有当实例被创建时就已经存在于 data 中的 property 才是响应式的

当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，
则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。

在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。

#props
类型：Array<string> | Object
props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。

#computed
类型：{ [key: string]: Function | { get: Function, set: Function } }
计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。
注意如果你为一个计算属性使用了箭头函数，则 this 不会指向这个组件的实例
计算属性的结果会被缓存，除非依赖的响应式 property 变化才会重新计算。注意，如果某个依赖 (比如非响应式 property) 在该实例范畴之外，则计算属性是不会被更新的。
!!!为什么Date.now() 不是响应式依赖

1.不要在选项 property 或回调上使用箭头函数
2.不要轻易使用v-html，很容易导致xss攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。


{{data}}
v-bind:attrName="data"   绑定属性名 attrName为该元素的属性
注：布尔属性值为false，该属性不会被包含在渲染出来的元素中

v-on:click ="functionName" 添加一个事件监听器
---------------------------------------------------
<!-- 完整语法 -->
<a v-bind:href="url">...</a>

<!-- 缩写 -->
<a :href="url">...</a>

<!-- 动态参数的缩写 (2.6.0+) -->
<a :[key]="url"> ... </a>

<!-- 完整语法 -->
<a v-on:click="doSomething">...</a>

<!-- 缩写 -->
<a @click="doSomething">...</a>

<!-- 动态参数的缩写 (2.6.0+) -->
<a @[event]="doSomething"> ... </a>
---------------------------------------------------


v-if="boolean"  条件成立才渲染组件 
v-for="xx(html) in xx(js)"可以绑定数组的数据来渲染一个项目列表
v-model="data"  表单输入和应用状态之间的双向绑定

---------------------------------------------------
html
<div id="app">
<p>{{message}}</p>
<button v-on:click="reverseMessage">reverse</button>
</div>

js
var app =new Vue({
el:"#app",
data:{
    message:"hello world"
},
methods:{
    reverseMessage:function(){
        this.message=this.message.split(").reverse().join("");
    }
}
})
---------------------------------------------------
html
<div id="app">
<ul>
<todo-item 
    v-for="item in Arr"
    v-bind:todo="item"
    v-bind:key="item.id"></todo-item>
</ul>
</div>

js
Vue.component("todo-item",{
    props:[todo],
    template: '<li>{{todo.text}}</li>'
})

var app = new Vue({
    el:"#app",
    data:{
        Arr:[
      { id: 0, text: '蔬菜' },
      { id: 1, text: '奶酪' },
      { id: 2, text: '随便其它什么人吃的东西' }
    ]
    }
})
---------------------------------------------------

#slot
---------------------------------------------------
html
<navigation-link url="/profile">
  Your Profile
</navigation-link>

navigation-link.Vue
<a
  v-bind:href="url"
  class="nav-link">
<slot></slot>
</a>
---------------------------------------------------

---------------------------------------------------
html
<current-user>
  <template v-slot:default="slotProps">
    {{ slotProps.user.firstName }}
  </template>
</current-user>

current-user.Vue
<span>
  <slot v-bind:user="user">
    {{ user.lastName }}
  </slot>
</span>

在上述情况下，当被提供的内容只有默认插槽时，组件的标签才可以被当作插槽的模板来使用。
这样我们就可以把 v-slot 直接用在组件上：
html
<current-user v-slot="slotProps">
  {{ slotProps.user.firstName }}
</current-user>
---------------------------------------------------

作用域插槽的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里：
function (slotProps) {
  // 插槽内容
}
这意味着 v-slot 的值实际上可以是任何能够作为函数定义中的参数的 JavaScript 表达式。
<current-user v-slot="{ user = { firstName: 'Guest' } }">
  {{ user.firstName }}
</current-user>

插槽 prop 允许我们将插槽转换为可复用的模板，这些模板可以基于输入的 prop 渲染出不同的内容。
这在设计封装数据逻辑同时允许父级组件自定义部分布局的可复用组件时是最有用的。
---------------------------------------------------
html
<todo-list v-bind:todos="todos">
  <template v-slot:todo="{ todo }">
    <span v-if="todo.isComplete">✓</span>
    {{ todo.text }}
  </template>
</todo-list>

等价于
<todo-list v-bind:todos="todos">
  <template slot="todo" slot-scope="{ todo }">
    <span v-if="todo.isComplete">✓</span>
    {{ todo.text }}
  </template>
</todo-list>



todo-list.Vue
<ul>
  <li
    v-for="todo in filteredTodos"
    v-bind:key="todo.id"
  >
<!--我们为每个 todo 准备了一个插槽，将 `todo` 对象作为一个插槽的 prop 传入。-->
    <slot name="todo" v-bind:todo="todo">
      <!-- 后备内容 -->
      {{ todo.text }}
    </slot>
  </li>
</ul>
---------------------------------------------------


